<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.project.test.mapper.TestCustomerMapper">
    
    <resultMap type="TestCustomer" id="TestCustomerResult">
        <result property="customerId"    column="customer_id"    />
        <result property="customerName"    column="customer_name"    />
        <result property="phonenumber"    column="phonenumber"    />
        <result property="sex"    column="sex"    />
        <result property="birthday"    column="birthday"    />
        <result property="remark"    column="remark"    />
    </resultMap>

    <sql id="selectTestCustomerVo">
        select customer_id, customer_name, phonenumber, sex, birthday, remark from test_customer
    </sql>

    <select id="selectTestCustomerList" parameterType="TestCustomer" resultMap="TestCustomerResult">
        <include refid="selectTestCustomerVo"/>
        <where>  
            <if test="customerName != null  and customerName != ''"> and customer_name like concat(concat('%', #{customerName}), '%')</if>
            <if test="phonenumber != null  and phonenumber != ''"> and phonenumber = #{phonenumber}</if>
            <if test="sex != null  and sex != ''"> and sex = #{sex}</if>
            <if test="birthday != null "> and birthday = #{birthday}</if>
        </where>
    </select>
    
    <select id="selectTestCustomerById" parameterType="Long" resultMap="TestCustomerResult">
        <include refid="selectTestCustomerVo"/>
        where customer_id = #{customerId}
    </select>
        
    <insert id="insertTestCustomer" parameterType="TestCustomer">
        <selectKey keyProperty="customerId" resultType="long" order="BEFORE">
            SELECT seq_test_customer.NEXTVAL as customerId FROM DUAL
        </selectKey>
        insert into test_customer
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="customerId != null">customer_id,</if>
            <if test="customerName != null">customer_name,</if>
            <if test="phonenumber != null">phonenumber,</if>
            <if test="sex != null">sex,</if>
            <if test="birthday != null">birthday,</if>
            <if test="remark != null">remark,</if>
         </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="customerId != null">#{customerId},</if>
            <if test="customerName != null">#{customerName},</if>
            <if test="phonenumber != null">#{phonenumber},</if>
            <if test="sex != null">#{sex},</if>
            <if test="birthday != null">#{birthday},</if>
            <if test="remark != null">#{remark},</if>
         </trim>
    </insert>

    <update id="updateTestCustomer" parameterType="TestCustomer">
        update test_customer
        <trim prefix="SET" suffixOverrides=",">
            <if test="customerName != null">customer_name = #{customerName},</if>
            <if test="phonenumber != null">phonenumber = #{phonenumber},</if>
            <if test="sex != null">sex = #{sex},</if>
            <if test="birthday != null">birthday = #{birthday},</if>
            <if test="remark != null">remark = #{remark},</if>
        </trim>
        where customer_id = #{customerId}
    </update>

    <delete id="deleteTestCustomerById" parameterType="Long">
        delete from test_customer where customer_id = #{customerId}
    </delete>

    <delete id="deleteTestCustomerByIds" parameterType="String">
        delete from test_customer where customer_id in 
        <foreach item="customerId" collection="array" open="(" separator="," close=")">
            #{customerId}
        </foreach>
    </delete>
    
</mapper>